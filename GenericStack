import java.util.ArrayList;

public class GenericStackTest {
   public static void main(String[] args) {
      //intTest();
      iTunesTest();
   }
   private static void intTest(){
      GenericStack<Integer> intStack = new GenericStack<Integer>();
      
      System.out.println("Pop! " + intStack.pop());
      System.out.println("Empty? " + intStack.isEmpty());
      System.out.println("Size: " + intStack.getSize());
      System.out.println(intStack);
      
      intStack.push(100);
      intStack.push(-200);
      intStack.push(0);
      intStack.push(null);
      intStack.push(31415926);
      
      System.out.println("\nEmpty? " + intStack.isEmpty());
      System.out.println("Size: " + intStack.getSize());
      System.out.println(intStack);
      
      System.out.println("\nPop! " + intStack.pop());
      System.out.println("Pop! " + intStack.pop());
      System.out.println("Pop! " + intStack.pop());
      System.out.println("Pop! " + intStack.pop());
      System.out.println("Pop! " + intStack.pop());
      System.out.println("Pop! " + intStack.pop());
      
      System.out.println("\nEmpty? " + intStack.isEmpty());
      System.out.println("Size: " + intStack.getSize());
      System.out.println(intStack);
   }
   private static void iTunesTest(){
      GenericStack<iTunesEntry> iTunesStack = new GenericStack<iTunesEntry>();
      
      System.out.println("Pop! " + iTunesStack.pop());
      System.out.println("Empty? " + iTunesStack.isEmpty());
      System.out.println("Size: " + iTunesStack.getSize());
      System.out.println(iTunesStack);
      
      iTunesEntry e1 = new iTunesEntry("Singularity", "Drowning", 268);
      iTunesEntry e2 = new iTunesEntry("Family of the Year", "Hero", 196);
      iTunesEntry e3 = new iTunesEntry("Oskar Schuster", "Wunder", 221);
      iTunesEntry e4 = new iTunesEntry("Above & Beyond", "Alchemy", 216);

      
      iTunesStack.push(e1);
      iTunesStack.push(e2);
      iTunesStack.push(e3);
      iTunesStack.push(null);
      iTunesStack.push(e4);
      
      System.out.println("\nEmpty? " + iTunesStack.isEmpty());
      System.out.println("Size: " + iTunesStack.getSize());
      System.out.println(iTunesStack);
      
      System.out.println("\nPop! " + iTunesStack.pop());
      System.out.println("Pop! " + iTunesStack.pop());
      System.out.println("Pop! " + iTunesStack.pop());
      
      System.out.println("\n" + iTunesStack + "\n");
      
      System.out.println("Pop! " + iTunesStack.pop());
      System.out.println("Pop! " + iTunesStack.pop());
      System.out.println("Pop! " + iTunesStack.pop());
      
      System.out.println("\nEmpty? " + iTunesStack.isEmpty());
      System.out.println("Size: " + iTunesStack.getSize());
      System.out.println(iTunesStack);
   }

}

// ----------Class GenericStack----------
class GenericStack<E>{
   
   private int head;
   private ArrayList<E> stack;
   
   static final int INITIAL_STACK_SIZE = 100;
   
   
   // pointer to first node in stack
   // constructor
   public GenericStack() {
      head = 0;
      stack = new ArrayList<E>(INITIAL_STACK_SIZE);
   }

   public void push(E x){
      stack.add(head++, x); 
   }
   
   public E pop(){
      if(head <= 0) return null; // Cloudflare!
      return stack.get(--head);
   }
   
   public E peek(){
      if(head <= 0) return null; // Cloudflare!
      return stack.get(head - 1);
   }
   
   public boolean isEmpty(){
      return (head <= 0); //minimizing redundancies, if/else not required
   }
   
   public int getSize(){
      return head; //array is zero based
   }
  
   // toString method
   public String toString() {
      String s = "Stack:\n";
      
      for(int k = 0; k < head; k++){
         s = s + "   " + stack.get(k) + "\n";
      }
      
      return s;
   }
}


//class iTunesEntry -----------------------------------------------------
class iTunesEntry implements Comparable<iTunesEntry> {
 private String title, artist;
 private int tuneTime;

 public static final int MIN_STRING = 1;
 public static final int MAX_STRING = 300;
 public static final int MAX_TIME = 10000000;

 // comparable tools
 public static final int SORT_BY_TITLE = 0;
 public static final int SORT_BY_ARTIST = 1;
 public static final int SORT_BY_TIME = 2;

 private static int sortKey;

 // default constructor
 public iTunesEntry() {
    title = "";
    artist = "";
    tuneTime = 0;
 }
 /**
  * added overloaded constructor to simplify code in general, moved iTunesEntry to this project
  * @author eToolis
  */
 public iTunesEntry(String title, String artist, int tuneTime) {
    this.title = title;
    this.artist = artist;
    this.tuneTime = tuneTime;
 }

 // accessors
 public String getTitle() {
    return title;
 }

 public String getArtist() {
    return artist;
 }

 public int getTime() {
    return tuneTime;
 }

 // mutators
 public boolean setTitle(String sArg) {
    if (!validString(sArg))
       return false;
    title = sArg;
    return true;
 }

 public boolean setArtist(String sArg) {
    if (!validString(sArg))
       return false;
    artist = sArg;
    return true;
 }

 public boolean setTime(int nArg) {
    if (nArg < 0 || nArg > MAX_TIME)
       return false;
    tuneTime = nArg;
    return true;
 }

 public String getArtistLastName() {
    // search for first blank from end of string
    // assume no trailing spaces
    int k, length;

    length = artist.length();
    if (length < 1)
       return "";

    for (k = length - 1; k >= 0; k--) {
       if (artist.charAt(k) == ' ')
          break;
    }

    if (k >= length - 1)
       return "";

    return artist.substring(k + 1, artist.length() - 1);
 }

 private static int convertStringToSeconds(String strToCnvrt) {
    int colonPos;
    int minutes, seconds;

    if (strToCnvrt.length() < 1)
       return 0;
    colonPos = strToCnvrt.indexOf(":");
    if (colonPos < 0 || colonPos > iTunesEntry.MAX_STRING)
       return 0;

    try {
       minutes = Integer.parseInt(strToCnvrt.substring(0, colonPos));
       seconds = Integer.parseInt(strToCnvrt.substring(colonPos + 1, strToCnvrt.length() - 1));
    } catch (NumberFormatException e) {
       return 0;
    }

    return minutes * 60 + seconds;
 }

 public String convertTimeToString() {
    int minutes, seconds;
    String strSeconds, strMinutes;

    minutes = tuneTime / 60;
    seconds = tuneTime % 60;

    strMinutes = "" + minutes;
    strSeconds = "" + seconds;

    if (strSeconds.length() < 2)
       strSeconds = "0" + strSeconds;

    return strMinutes + ":" + strSeconds;
 }

 public static boolean setSortType(int whichType) {
    switch (whichType) {
    case SORT_BY_TITLE:
    case SORT_BY_ARTIST:
    case SORT_BY_TIME:
       sortKey = whichType;
       return true;
    default:
       return false;
    }
 }

 // we allow this to be defined by one field, not full identity - a choice
 public int compareTo(iTunesEntry other) {
    switch (sortKey) {
    case SORT_BY_TITLE:
       return (title.compareToIgnoreCase(other.title));
    case SORT_BY_ARTIST:
       // get last name from string
       // stack the last name before the first - no worries about trailing
       // last
       return (getArtistLastName() + artist).compareToIgnoreCase(other.getArtistLastName() + other.artist);

    case SORT_BY_TIME:
       return (tuneTime - other.tuneTime);
    default:
       return 0;
    }
 }

 public String toString() {
    return artist + " | " + title + " | " + " " + convertTimeToString();
 }

 // utility for testing all String mutator args
 private static boolean validString(String sArg) {
    if (sArg == null)
       return false;
    if (sArg.length() < MIN_STRING || sArg.length() > MAX_STRING)
       return false;
    return true;
 }
}
